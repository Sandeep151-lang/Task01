Q.no-1. Difference between HTTP1.1 vs HTTP2 
Ans -	HTTP/1.1
	Developed by Timothy Berners-Lee in 1989 as a communication standard for the World Wide Web, HTTP is a top-level application protocol 
	that exchanges information between a client computer and a local or remote web server. In this process, a client sends a text-based 
	request to a server by calling a method like GET or POST. In response, the server sends a resource like an HTML page back to the client.
	For example, let’s say you are visiting a website at the domain www.example.com. When you navigate to this URL, the web browser on your 
	computer sends an HTTP request in the form of a text-based message, similar to the one shown here:

	GET /index.html HTTP/1.1
	Host: www.example.com

	This request uses the GET method, which asks for data from the host server listed after Host:. In response to this request, the example.com 
	web server returns an HTML page to the requesting client, in addition to any images, stylesheets, or other resources called for in the HTML. 
		Note that not all of the resources are returned to the client in the first call for data. The requests and responses will go back and forth 
	between the server and client until the web browser has received all the resources necessary to render the contents of the HTML page on your screen.
	You can think of this exchange of requests and responses as a single application layer of the internet protocol stack, sitting on top of the transfer 
	layer (usually using the Transmission Control Protocol, or TCP) and networking layers (using the Internet Protocol, or IP):


	HTTP/2
	HTTP/2 began as the SPDY protocol, developed primarily at Google with the intention of reducing web page load latency by using techniques such as 
	compression,multiplexing, and prioritization. This protocol served as a template for HTTP/2 when the Hypertext Transfer Protocol working group httpbis
	of the IETF (Internet Engineering Task Force) put the standard together, culminating in the publication of HTTP/2 in May 2015. From the beginning, many
	browsers supported this standardization effort, including Chrome, Opera, Internet Explorer, and Safari. Due in part to this browser support, there has 
	been a significant adoption rate of the protocol since 2015, with especially high rates among new sites. From a technical point of view, one of the most 
	significant features that distinguishes HTTP/1.1 and HTTP/2 is the binary framing layer, which can be thought of as a part of the application layer in the 
	internet protocol stack. As opposed to HTTP/1.1, which keeps all requests and responses in plain text format, HTTP/2 uses the binary framing layer to 
	encapsulate all messages in binary format, while still maintaining HTTP semantics, such as verbs, methods, and headers. An application level API would 
	still create messages in the conventional HTTP formats, but the underlying layer would then convert these messages into binary. This ensures that web 
	applications created before HTTP/2 can continue functioning as normal when interacting with the new protocol.
	The conversion of messages into binary allows HTTP/2 to try new approaches to data delivery not available in HTTP/1.1, a contrast that is at the root of 
	the practical differences between the two protocols. The next section will take a look at the delivery model of HTTP/1.1, followed by what new models are 
	made possible by HTTP/2.


Q. no-2. http version history 
Ans - HTTP (HyperText Transfer Protocol) is the underlying protocol of the World Wide Web. Developed by Tim Berners-Lee and his team between 1989-1991, HTTP has
	seen many changes, keeping most of the simplicity and further shaping its flexibility. HTTP has evolved from an early protocol to exchange files in a
	semi-trusted laboratory environment, to the modern maze of the Internet, now carrying images, videos in high resolution and 3D.
	
	In 1989, while he was working at CERN, Tim Berners-Lee wrote a proposal to build a hypertext system over the Internet. Initially calling it the Mesh, 
	it was later renamed to World Wide Web during its implementation in 1990. Built over the existing TCP and IP protocols, it consisted of 4 building blocks:

	A textual format to represent hypertext documents, the HyperText Markup Language (HTML).
	A simple protocol to exchange these documents, the HypertText Transfer Protocol (HTTP).
	A client to display (and accidentally edit) these documents, the first Web browser called WorldWideWeb.
	A server to give access to the document, an early version of httpd.
	These four building blocks were completed by the end of 1990, and the first servers were already running outside of CERN by early 1991. 
	On August 6th 1991, Tim Berners-Lee's post on the public alt.hypertext newsgroup is now considered as the official start of the World Wide Web 
	as a public project.
	The HTTP protocol used in those early phases was very simple, later dubbed HTTP/0.9, and sometimes as the one-line protocol.
	

	HTTP/0.9 – The one-line protocol
	The initial version of HTTP had no version number; it has been later called 0.9 to differentiate it from the later versions. HTTP/0.9 is extremely simple: 
	requests consist of a single line and start with the only possible method GET followed by the path to the resource (not the URL as both the protocol, server,
	and port are unnecessary once connected to the server).

	GET /mypage.html
	The response is extremely simple too: it only consisted of the file itself.

	<HTML>
	A very simple HTML page
	</HTML>


	HTTP/1.0 – Building extensibility
	HTTP/0.9 was very limited and both browsers and servers quickly extended it to be more versatile:
	Versioning information is now sent within each request (HTTP/1.0 is appended to the GET line)
	A status code line is also sent at the beginning of the response, allowing the browser itself to understand the success or failure of the request
	and to adapt its behavior in consequence (like in updating or using its local cache in a specific way) The notion of HTTP headers has been introduced,
	both for the requests and the responses, allowing metadata to be transmitted and making the protocol extremely flexible and extensible.
	With the help of the new HTTP headers, the ability to transmit other documents than plain HTML files has been added (thanks to the Content-Type header)


	HTTP/1.1 – The standardized protocol
	In parallel to the somewhat chaotic use of the diverse implementations of HTTP/1.0, and since 1995, well before the publication of HTTP/1.0 document 
	the next year, proper standardization was in progress. The first standardized version of HTTP, HTTP/1.1 was published in early 1997, only a few months after
	HTTP/1.0.

	HTTP/1.1 clarified ambiguities and introduced numerous improvements:
	A connection can be reused, saving the time to reopen it numerous times to display the resources embedded into the single original document retrieved.
	Pipelining has been added, allowing to send a second request before the answer for the first one is fully transmitted, lowering the latency of the 
	communication. Chunked responses are now also supported. Additional cache control mechanisms have been introduced.
	Content negotiation, including language, encoding, or type, has been introduced, and allows a client and a server to agree on the most adequate 
	content to exchange.
	Thanks to the Host header, the ability to host different domains at the same IP address now allows server colocation.

	Post-HTTP/2 evolution
	HTTP didn't stop evolving upon the release of HTTP/2. Like with HTTP/1.x previously, HTTP's extensibility is still being used to add new features. 
	Notably, we can cite new extensions of the HTTP protocol appearing in 2016:
	Support of Alt-Svc allows the dissociation of the identification and the location of a given resource, allowing for a smarter CDN caching mechanism.
	The introduction of Client-Hints allows the browser, or client, to proactively communicate information about its requirements, or hardware constraints, 
	to the server.
	The introduction of security-related prefixes in the Cookie header, now helps guarantee a secure cookie has not been altered.
	This evolution of HTTP proves its extensibility and simplicity, liberating creation of many applications and compelling the adoption of the protocol. 
	The environment in which HTTP is used today is quite different from that seen in the early 1990s. HTTP's original design proved to be a masterpiece,
	allowing the Web to evolve over a quarter of a century, without the need of a mutiny. By healing flaws, yet retaining the flexibility and extensibility 
	which made HTTP such a success, the adoption of HTTP/2 hints at a bright future for the protocol.


Q.no-3. List 5 difference between Browser JS(console) vs Nodejs 
	Nodejs 
	1-Node doesn’t have a predefined “window” object cause it doesn’t have a window to draw anything.
	2-“location” object is related to a particular url; that means it is for page specific. So, node doesn’t require that.
	3-Ofcourse Node doesn’t have “document” object also, cause it never have to render anything in a page.
	4-Node has “global”, which is a predefined global object. It contains several functions that are not available in browsers, cause they are needed for server side works only.
	5-“require” object is predefined in Node which is used to include modules in the app.
	6-In Node everything is a module. You must keep your code inside a module.
	
	Browser js(Console) :
	1-“window” is a predefined global object which has functions and attributes, that have to deal with window that has been drawn.
	2-“location” is another predefined object in browsers, that has all the information about the url we have loaded.
	3-“document”, which is also another predefined global variable in browsers, has the html which is rendered.
	4-Browsers may have an object named “global”, but it will be the exact one as “window”.
	5-Browsers don’t have “require” predefined. You may include it in your app for asynchronous file loading.
	6-Moduling is not mandatory in client side JavaScript, i.e. in browsers.
	7-As both of them are JavaScript executor, and Node uses the JavaScript engine of a browser (Chrome), so differences are not much there. 
	It is just the Node wrapper which has been written on top of JavaScript V8 Runtime engine, which is deleting few objects and also including 
	some according to the requirement of Node.


Q.no-4. what happens when you type a URL in the address bar in the browser?
Ans-	1-You type in a URL into an address bar in a browser.
	2-Your OS (Operating System) sends a query to the DNS recursive resolver (resolver) configured to it.
	3-The resolver picks up the request and checks the cached data to see if the domain name you entered is there. If it is, the resolver will send the IP address of the domain name back to your web browser.
	4-If it isn’t, the resolver queries the DNS root nameserver (nameserver).
	5-The nameserver responds with the IP address of the TLD DNS server (TLD).
	6-The resolver makes a request to the specified TLD (like .com, .org, etc).
	7-The TLD responds with the IP address of the domain’s nameserver (the website you want to visit).
	8-The nameserver responds with the IP address of the domain.
	9-The resolver responds to the web browser with the domain’s IP address.
	10-You access the website you want to visit.